Step 1: Project Setup and Dependencies
Frontend Setup (React + Vite + Tailwind)
bash
# Create new React project with Vite
npm create vite@latest flightops-chatbot -- --template react
cd flightops-chatbot

# Install dependencies
npm install
npm install -D tailwindcss postcss autoprefixer
npm install framer-motion three @react-three/fiber @react-three/drei
npm install axios lucide-react
npm install @tailwindcss/forms

# Initialize Tailwind
npx tailwindcss init -p
#######################################################################
Update package.json for React 19 compatibility:
json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "framer-motion": "^10.16.0",
    "three": "^0.158.0",
    "@react-three/fiber": "^8.15.11",
    "@react-three/drei": "^9.88.13",
    "axios": "^1.6.0",
    "lucide-react": "^0.303.0"
  }
}
###############################################################################################
Step 2: FastAPI Backend with CORS
Create fastapi_backend.py:

python
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import asyncio
import json
import logging
from typing import Optional

# Import your existing MCP client
from client import FlightOpsMCPClient

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("FlightOps.FastAPI")

app = FastAPI(title="FlightOps Chatbot API", version="1.0.0")

# CORS middleware configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://127.0.0.1:5173"],  # Vite default
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic models
class ChatMessage(BaseModel):
    message: str
    session_id: Optional[str] = None

class FlightQuery(BaseModel):
    carrier: Optional[str] = None
    flight_number: Optional[str] = None
    date: Optional[str] = None
    query_type: str  # basic_info, operations, equipment, delays, fuel, passengers, crew

# Global MCP client instance
mcp_client = None

@app.on_event("startup")
async def startup_event():
    global mcp_client
    mcp_client = FlightOpsMCPClient()
    await mcp_client.connect()
    logger.info("FlightOps MCP Client connected")

@app.on_event("shutdown")
async def shutdown_event():
    if mcp_client:
        await mcp_client.disconnect()
    logger.info("FlightOps MCP Client disconnected")

@app.get("/")
async def root():
    return {"message": "FlightOps Chatbot API", "status": "operational"}

@app.get("/health")
async def health_check():
    try:
        if mcp_client:
            tools = await mcp_client.list_tools()
            return {"status": "healthy", "tools_available": True}
        return {"status": "unhealthy", "error": "MCP client not initialized"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Health check failed: {str(e)}")

@app.post("/api/chat")
async def chat_endpoint(chat_message: ChatMessage):
    try:
        if not mcp_client:
            raise HTTPException(status_code=503, detail="Service unavailable")
        
        logger.info(f"Processing chat message: {chat_message.message}")
        
        # Use your existing run_query method
        result = await mcp_client.run_query(chat_message.message)
        
        return {
            "status": "success",
            "response": result.get("summary", {}).get("summary", "No response generated"),
            "raw_data": result,
            "session_id": chat_message.session_id
        }
        
    except Exception as e:
        logger.error(f"Chat processing error: {e}")
        raise HTTPException(status_code=500, detail=f"Chat processing failed: {str(e)}")

@app.post("/api/flight/query")
async def flight_query_endpoint(query: FlightQuery):
    try:
        if not mcp_client:
            raise HTTPException(status_code=503, detail="Service unavailable")
        
        # Build user query based on query type
        query_map = {
            "basic_info": f"Get basic information for flight {query.carrier} {query.flight_number} on {query.date}",
            "operations": f"Get operation times for flight {query.carrier} {query.flight_number} on {query.date}",
            "equipment": f"Get equipment information for flight {query.carrier} {query.flight_number} on {query.date}",
            "delays": f"Get delay summary for flight {query.carrier} {query.flight_number} on {query.date}",
            "fuel": f"Get fuel summary for flight {query.carrier} {query.flight_number} on {query.date}",
            "passengers": f"Get passenger information for flight {query.carrier} {query.flight_number} on {query.date}",
            "crew": f"Get crew information for flight {query.carrier} {query.flight_number} on {query.date}"
        }
        
        user_query = query_map.get(query.query_type, query_map["basic_info"])
        
        result = await mcp_client.run_query(user_query)
        
        return {
            "status": "success",
            "query_type": query.query_type,
            "response": result.get("summary", {}).get("summary", "No response generated"),
            "raw_data": result
        }
        
    except Exception as e:
        logger.error(f"Flight query error: {e}")
        raise HTTPException(status_code=500, detail=f"Flight query failed: {str(e)}")

@app.get("/api/tools")
async def list_tools():
    try:
        if not mcp_client:
            raise HTTPException(status_code=503, detail="Service unavailable")
        
        tools = await mcp_client.list_tools()
        return {"status": "success", "tools": tools}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to list tools: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
#########################################################################################
Step 3: Frontend Configuration
Tailwind Config (tailwind.config.js):
javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'indigo': {
          50: '#eef2ff',
          100: '#e0e7ff',
          200: '#c7d2fe',
          300: '#a5b4fc',
          400: '#818cf8',
          500: '#6366f1',
          600: '#4f46e5',
          700: '#4338ca',
          800: '#3730a3',
          900: '#312e81',
        },
        'aviation': {
          'sky': '#87CEEB',
          'deep-blue': '#1e3a8a',
          'cloud': '#f8fafc',
          'sunset': '#f59e0b'
        }
      },
      animation: {
        'float': 'float 6s ease-in-out infinite',
        'fly-across': 'flyAcross 8s linear infinite',
        'pulse-slow': 'pulse 3s ease-in-out infinite',
      },
      keyframes: {
        float: {
          '0%, 100%': { transform: 'translateY(0px)' },
          '50%': { transform: 'translateY(-20px)' },
        },
        flyAcross: {
          '0%': { transform: 'translateX(-100px) translateY(0px)' },
          '50%': { transform: 'translateX(50vw) translateY(-20px)' },
          '100%': { transform: 'translateX(100vw) translateY(0px)' },
        }
      },
      backgroundImage: {
        'sky-gradient': 'linear-gradient(180deg, #87CEEB 0%, #1e3a8a 100%)',
        'cloud-pattern': "url('data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%23ffffff\" fill-opacity=\"0.1\"%3E%3Ccircle cx=\"30\" cy=\"30\" r=\"4\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')"
      }
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}
###################################################################################################
CSS File (src/index.css):
css
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
}

.aviation-bg {
  background: linear-gradient(180deg, #87CEEB 0%, #1e3a8a 100%);
}

.cloud-animation {
  background-image: 
    radial-gradient(circle at 20% 80%, rgba(255,255,255,0.1) 2%, transparent 2%),
    radial-gradient(circle at 80% 20%, rgba(255,255,255,0.1) 2%, transparent 2%),
    radial-gradient(circle at 40% 40%, rgba(255,255,255,0.1) 2%, transparent 2%);
  background-size: 200px 200px;
}

/* Custom scrollbar */
.custom-scrollbar::-webkit-scrollbar {
  width: 6px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 3px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3);
  border-radius: 3px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.5);
}
Step 4: React Components
##########################################################
Main App Component (src/App.jsx):
jsx
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import ChatInterface from './components/ChatInterface';
import FlightQueryPanel from './components/FlightQueryPanel';
import FlyingPlaneAnimation from './components/animations/FlyingPlaneAnimation';
import DestinationGallery from './components/DestinationGallery';
import { Plane, Cloud, Satellite, Wifi } from 'lucide-react';

function App() {
  const [activeTab, setActiveTab] = useState('chat');
  const [isLoading, setIsLoading] = useState(false);

  return (
    <div className="min-h-screen aviation-bg cloud-animation relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden">
        <FlyingPlaneAnimation isActive={isLoading} />
        
        {/* Floating Clouds */}
        <motion.div
          className="absolute top-20 left-10 text-white opacity-20"
          animate={{ y: [0, -20, 0] }}
          transition={{ duration: 8, repeat: Infinity, ease: "easeInOut" }}
        >
          <Cloud size={40} />
        </motion.div>
        
        <motion.div
          className="absolute top-40 right-20 text-white opacity-15"
          animate={{ y: [0, 15, 0] }}
          transition={{ duration: 6, repeat: Infinity, ease: "easeInOut", delay: 1 }}
        >
          <Cloud size={60} />
        </motion.div>
      </div>

      {/* Main Container */}
      <div className="relative z-10 container mx-auto px-4 py-8">
        {/* Header */}
        <motion.header 
          className="text-center mb-8"
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <div className="flex items-center justify-center gap-4 mb-4">
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
            >
              <Satellite className="text-yellow-400" size={32} />
            </motion.div>
            <h1 className="text-4xl font-bold text-white drop-shadow-lg">
              FlightOps ✈️
            </h1>
            <Wifi className="text-green-400" size={32} />
          </div>
          <p className="text-indigo-100 text-lg">
            AI-Powered Flight Operations Assistant
          </p>
        </motion.header>

        {/* Navigation Tabs */}
        <motion.div 
          className="flex justify-center mb-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3 }}
        >
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-2 flex gap-2">
            {[
              { id: 'chat', label: 'Chat Assistant', icon: '💬' },
              { id: 'query', label: 'Flight Query', icon: '✈️' },
              { id: 'destinations', label: 'Destinations', icon: '🌍' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-6 py-3 rounded-xl font-medium transition-all duration-300 flex items-center gap-2 ${
                  activeTab === tab.id
                    ? 'bg-indigo-600 text-white shadow-lg'
                    : 'text-indigo-100 hover:bg-white/10'
                }`}
              >
                <span>{tab.icon}</span>
                {tab.label}
              </button>
            ))}
          </div>
        </motion.div>

        {/* Main Content */}
        <AnimatePresence mode="wait">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
          >
            {activeTab === 'chat' && (
              <ChatInterface 
                isLoading={isLoading}
                setIsLoading={setIsLoading}
              />
            )}
            {activeTab === 'query' && (
              <FlightQueryPanel 
                isLoading={isLoading}
                setIsLoading={setIsLoading}
              />
            )}
            {activeTab === 'destinations' && <DestinationGallery />}
          </motion.div>
        </AnimatePresence>
      </div>
    </div>
  );
}

export default App;
############################################################################
Chat Interface Component (src/components/ChatInterface.jsx):
jsx
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, User, Bot, Plane } from 'lucide-react';
import axios from 'axios';

const ChatInterface = ({ isLoading, setIsLoading }) => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Hello! I'm your FlightOps assistant. How can I help you with flight information today?",
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      const response = await axios.post('http://localhost:8000/api/chat', {
        message: inputMessage
      });

      const botMessage = {
        id: Date.now() + 1,
        text: response.data.response,
        isUser: false,
        timestamp: new Date(),
        rawData: response.data.raw_data
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      const errorMessage = {
        id: Date.now() + 1,
        text: "Sorry, I encountered an error. Please try again.",
        isUser: false,
        timestamp: new Date(),
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="max-w-4xl mx-auto">
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        className="bg-white/10 backdrop-blur-lg rounded-2xl shadow-2xl border border-white/20 overflow-hidden"
      >
        {/* Chat Header */}
        <div className="bg-indigo-600/50 p-6 border-b border-white/10">
          <div className="flex items-center gap-3">
            <motion.div
              animate={{ 
                scale: [1, 1.1, 1],
                rotate: [0, 5, -5, 0]
              }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              <Plane className="text-white" size={24} />
            </motion.div>
            <div>
              <h2 className="text-white font-semibold text-lg">Flight Assistant</h2>
              <p className="text-indigo-100 text-sm">Real-time flight information</p>
            </div>
          </div>
        </div>

        {/* Messages Container */}
        <div className="h-96 overflow-y-auto p-6 space-y-4 custom-scrollbar">
          <AnimatePresence>
            {messages.map((message) => (
              <motion.div
                key={message.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className={`flex gap-3 ${message.isUser ? 'justify-end' : 'justify-start'}`}
              >
                {!message.isUser && (
                  <div className="flex-shrink-0 w-8 h-8 bg-indigo-500 rounded-full flex items-center justify-center">
                    <Bot size={16} className="text-white" />
                  </div>
                )}
                
                <div
                  className={`max-w-[70%] rounded-2xl p-4 ${
                    message.isUser
                      ? 'bg-indigo-500 text-white rounded-br-none'
                      : message.isError
                      ? 'bg-red-500/20 text-red-100 border border-red-500/30'
                      : 'bg-white/10 text-white rounded-bl-none backdrop-blur-sm'
                  }`}
                >
                  <p className="text-sm whitespace-pre-wrap">{message.text}</p>
                  <p className={`text-xs mt-2 ${
                    message.isUser ? 'text-indigo-200' : 'text-white/60'
                  }`}>
                    {message.timestamp.toLocaleTimeString()}
                  </p>
                </div>

                {message.isUser && (
                  <div className="flex-shrink-0 w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                    <User size={16} className="text-white" />
                  </div>
                )}
              </motion.div>
            ))}
          </AnimatePresence>

          {isLoading && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex gap-3 justify-start"
            >
              <div className="flex-shrink-0 w-8 h-8 bg-indigo-500 rounded-full flex items-center justify-center">
                <Bot size={16} className="text-white" />
              </div>
              <div className="bg-white/10 text-white rounded-2xl rounded-bl-none p-4 backdrop-blur-sm">
                <div className="flex gap-1">
                  <motion.div
                    animate={{ scale: [1, 1.2, 1] }}
                    transition={{ duration: 1, repeat: Infinity, delay: 0 }}
                    className="w-2 h-2 bg-white rounded-full"
                  />
                  <motion.div
                    animate={{ scale: [1, 1.2, 1] }}
                    transition={{ duration: 1, repeat: Infinity, delay: 0.2 }}
                    className="w-2 h-2 bg-white rounded-full"
                  />
                  <motion.div
                    animate={{ scale: [1, 1.2, 1] }}
                    transition={{ duration: 1, repeat: Infinity, delay: 0.4 }}
                    className="w-2 h-2 bg-white rounded-full"
                  />
                </div>
              </div>
            </motion.div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <div className="p-6 border-t border-white/10">
          <div className="flex gap-3">
            <div className="flex-1">
              <textarea
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Ask about flight status, delays, equipment, or any flight information..."
                className="w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 text-white placeholder-white/50 resize-none focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:border-transparent backdrop-blur-sm"
                rows="2"
                disabled={isLoading}
              />
            </div>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading}
              className={`px-6 py-3 rounded-xl font-medium transition-all duration-300 flex items-center gap-2 ${
                inputMessage.trim() && !isLoading
                  ? 'bg-indigo-500 text-white hover:bg-indigo-600 shadow-lg'
                  : 'bg-white/10 text-white/50 cursor-not-allowed'
              }`}
            >
              <Send size={18} />
              Send
            </motion.button>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default ChatInterface;
##################################################################################
Flying Plane Animation Component (src/components/animations/FlyingPlaneAnimation.jsx):
jsx
import React, { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { Text, Float } from '@react-three/drei';
import * as THREE from 'three';

const FlyingPlane = ({ position, speed }) => {
  const planeRef = useRef();

  useFrame((state) => {
    if (planeRef.current) {
      planeRef.current.position.x += speed;
      planeRef.current.rotation.z = Math.sin(state.clock.elapsedTime * 2) * 0.1;
      
      // Reset position when off screen
      if (planeRef.current.position.x > 15) {
        planeRef.current.position.x = -15;
      }
    }
  });

  return (
    <Float speed={2} rotationIntensity={0.5} floatIntensity={0.5}>
      <group ref={planeRef} position={position}>
        {/* Simple plane geometry */}
        <mesh>
          <boxGeometry args={[1, 0.2, 0.4]} />
          <meshStandardMaterial color="#4f46e5" metalness={0.6} roughness={0.2} />
        </mesh>
        <mesh position={[0, 0, 0.3]}>
          <boxGeometry args={[0.6, 0.15, 0.1]} />
          <meshStandardMaterial color="#6366f1" />
        </mesh>
        <mesh position={[-0.4, 0.3, 0]} rotation={[0, 0, Math.PI / 4]}>
          <boxGeometry args={[0.8, 0.1, 0.1]} />
          <meshStandardMaterial color="#818cf8" />
        </mesh>
      </group>
    </Float>
  );
};

const FlyingPlaneAnimation = ({ isActive }) => {
  if (typeof window === 'undefined') return null;

  return (
    <div className="absolute inset-0 pointer-events-none">
      <div style={{ width: '100%', height: '100%' }}>
        <canvas
          style={{
            width: '100%',
            height: '100%',
            display: isActive ? 'block' : 'none'
          }}
        >
          <React.Suspense fallback={null}>
            <scene>
              <ambientLight intensity={0.6} />
              <directionalLight position={[10, 10, 5]} intensity={1} />
              
              <FlyingPlane position={[-10, 2, 0]} speed={0.05} />
              <FlyingPlane position={[-15, -1, 0]} speed={0.03} />
              <FlyingPlane position={[-5, 4, 0]} speed={0.04} />
              
              <Text
                position={[0, -3, 0]}
                color="white"
                fontSize={0.8}
                maxWidth={10}
                textAlign="center"
                font="/fonts/Inter-Bold.woff"
              >
                FlightOps
              </Text>
            </scene>
          </React.Suspense>
        </canvas>
      </div>
    </div>
  );
};

export default FlyingPlaneAnimation;
###############################################################################
Destination Gallery Component (src/components/DestinationGallery.jsx):
jsx
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, ChevronRight, MapPin, Users, Clock } from 'lucide-react';

const DestinationGallery = () => {
  const [currentIndex, setCurrentIndex] = useState(0);

  const destinations = [
    {
      id: 1,
      name: "Mumbai (BOM)",
      image: "https://images.unsplash.com/photo-1562976547-6a75f7b36c96?w=500&h=300&fit=crop",
      flights: "45 daily flights",
      passengers: "50K+ daily",
      description: "Financial capital with bustling airport operations"
    },
    {
      id: 2,
      name: "Delhi (DEL)",
      image: "https://images.unsplash.com/photo-1587474260584-136574528ed5?w=500&h=300&fit=crop",
      flights: "60 daily flights",
      passengers: "65K+ daily",
      description: "India's largest and busiest airport"
    },
    {
      id: 3,
      name: "Bangalore (BLR)",
      image: "https://images.unsplash.com/photo-1596176530529-78163a4f7af2?w=500&h=300&fit=crop",
      flights: "35 daily flights",
      passengers: "40K+ daily",
      description: "Tech hub with modern airport facilities"
    },
    {
      id: 4,
      name: "Dubai (DXB)",
      image: "https://images.unsplash.com/photo-1512453979798-5ea266f8880c?w=500&h=300&fit=crop",
      flights: "25 daily flights",
      passengers: "30K+ daily",
      description: "Major international connection hub"
    }
  ];

  const nextDestination = () => {
    setCurrentIndex((prev) => (prev + 1) % destinations.length);
  };

  const prevDestination = () => {
    setCurrentIndex((prev) => (prev - 1 + destinations.length) % destinations.length);
  };

  return (
    <div className="max-w-6xl mx-auto">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <h2 className="text-3xl font-bold text-white mb-2">Popular Destinations</h2>
        <p className="text-indigo-100">Explore our major flight destinations</p>
      </motion.div>

      <div className="relative bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20">
        <AnimatePresence mode="wait">
          <motion.div
            key={currentIndex}
            initial={{ opacity: 0, x: 100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -100 }}
            transition={{ duration: 0.5 }}
            className="grid md:grid-cols-2 gap-8 items-center"
          >
            {/* Image Section */}
            <div className="relative">
              <motion.img
                src={destinations[currentIndex].image}
                alt={destinations[currentIndex].name}
                className="w-full h-64 md:h-80 object-cover rounded-2xl shadow-2xl"
                whileHover={{ scale: 1.02 }}
                transition={{ type: "spring", stiffness: 300 }}
              />
              <motion.div
                className="absolute top-4 left-4 bg-indigo-600 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center gap-1"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.2 }}
              >
                <MapPin size={14} />
                {destinations[currentIndex].name}
              </motion.div>
            </div>

            {/* Info Section */}
            <div className="text-white">
              <h3 className="text-2xl font-bold mb-4">{destinations[currentIndex].name}</h3>
              <p className="text-lg mb-6 text-indigo-100">
                {destinations[currentIndex].description}
              </p>
              
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-indigo-500 rounded-full flex items-center justify-center">
                    <Clock size={20} />
                  </div>
                  <div>
                    <p className="font-semibold">Flight Frequency</p>
                    <p className="text-indigo-100">{destinations[currentIndex].flights}</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
                    <Users size={20} />
                  </div>
                  <div>
                    <p className="font-semibold">Daily Passengers</p>
                    <p className="text-indigo-100">{destinations[currentIndex].passengers}</p>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>
        </AnimatePresence>

        {/* Navigation Buttons */}
        <button
          onClick={prevDestination}
          className="absolute left-4 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center text-white hover:bg-white/30 transition-all"
        >
          <ChevronLeft size={20} />
        </button>
        
        <button
          onClick={nextDestination}
          className="absolute right-4 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center text-white hover:bg-white/30 transition-all"
        >
          <ChevronRight size={20} />
        </button>

        {/* Dots Indicator */}
        <div className="flex justify-center gap-2 mt-6">
          {destinations.map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentIndex(index)}
              className={`w-3 h-3 rounded-full transition-all ${
                index === currentIndex
                  ? 'bg-indigo-400 scale-125'
                  : 'bg-white/30 hover:bg-white/50'
              }`}
            />
          ))}
        </div>
      </div>

      {/* Mini Gallery */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-8">
        {destinations.map((destination, index) => (
          <motion.div
            key={destination.id}
            whileHover={{ scale: 1.05, y: -5 }}
            className={`relative cursor-pointer rounded-xl overflow-hidden ${
              index === currentIndex ? 'ring-2 ring-indigo-400' : ''
            }`}
            onClick={() => setCurrentIndex(index)}
          >
            <img
              src={destination.image}
              alt={destination.name}
              className="w-full h-24 object-cover"
            />
            <div className="absolute inset-0 bg-black/40 hover:bg-black/20 transition-all flex items-center justify-center">
              <p className="text-white text-sm font-medium text-center px-2">
                {destination.name}
              </p>
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default DestinationGallery;
#################################################################
Step 5: Running the Application
Start the Backend:
bash
python fastapi_backend.py
Start the Frontend:
bash
npm run dev
#############################################################
Step 6: Additional Features You Can Add
Real-time Flight Status Updates

Interactive Flight Path Visualization

Weather Integration

Crew Management Dashboard

Fuel Optimization Analytics

This setup provides:

✅ React 18 with Vite and Tailwind CSS v3

✅ Aviation theme with Indigo Airlines colors

✅ 3D flying plane animations during queries

✅ Horizontal destination gallery with 3D effects

✅ FastAPI backend with CORS enabled

✅ Connection to your existing MCP server

✅ Modern chatbot interface with aviation styling

The application will be available at http://localhost:5173 and the API at http://localhost:8000.


