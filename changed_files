import os
import logging
from logging.handlers import RotatingFileHandler
from datetime import datetime

def setup_logger(name: str):
    """Setup comprehensive logging configuration"""
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    
    # Create logs directory if it doesn't exist
    os.makedirs('logs', exist_ok=True)
    
    # File handler with rotation
    file_handler = RotatingFileHandler(
        f'logs/flight_mcp_{datetime.now().strftime("%Y%m%d")}.log',
        maxBytes=10*1024*1024,  # 10MB
        backupCount=5
    )
    
    # Console handler
    console_handler = logging.StreamHandler()
    
    # Formatter
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s'
    )
    
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
##################################################################################################
from pymongo import MongoClient
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def get_database():
    MONGO_URI = os.getenv("MONGODB_URI", "mongodb://localhost:27017")
    DB_NAME = os.getenv("DB_NAME", "flight_database")
    
    try:
        client = MongoClient(MONGO_URI)
        # Test connection
        client.admin.command('ping')
        print(f"✅ Connected to MongoDB: {MONGO_URI}")
        print(f"✅ Database: {DB_NAME}")
        return client[DB_NAME]
    except Exception as e:
        print(f"❌ MongoDB connection failed: {e}")
        raise

# Test data insertion (optional)
def insert_sample_data():
    """Insert sample flight data for testing"""
    db = get_database()
    
    sample_flight = {
        "flightlegstate": "Scheduled",
        "carrier": "United",
        "dateoforigin": "2024-01-15",
        "flight_number": "UA245",
        "startstation": "JFK",
        "endstation": "LAX",
        "scheduledstarttime": "2024-01-15T08:00:00",
        "scheduledEndTime": "2024-01-15T11:00:00",
        "returnEvents": [
            {"returnEvent": "On Time"},
            {"returnEvent": "Boarding"}
        ]
    }
    
    try:
        result = db.flights.insert_one(sample_flight)
        print(f"✅ Sample flight data inserted with ID: {result.inserted_id}")
        return result.inserted_id
    except Exception as e:
        print(f"❌ Failed to insert sample data: {e}")
        return None
##########################################################################################
from pydantic import BaseModel
from datetime import datetime
from typing import List, Optional

class ReturnEvent(BaseModel):
    returnEvent: str
    # Add other return event fields as needed

class FlightData(BaseModel):
    flightlegstate: str
    carrier: str
    dateoforigin: str
    flight_number: str
    startstation: str
    endstation: str
    scheduledstarttime: datetime
    scheduledEndTime: datetime
    returnEvents: List[ReturnEvent]

    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }
###########################################################################################
import os
from openai import AzureOpenAI
from config import setup_logger
import time
from dotenv import load_dotenv

class AzureOpenAIClient:
    def __init__(self):
        self.logger = setup_logger("AzureOpenAIClient")
        self.max_retries = 3
        self.retry_delay = 1
        
        try:
            # Load environment variables explicitly
            load_dotenv()
            
            # Validate required environment variables
            azure_endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
            api_key = os.getenv("AZURE_OPENAI_KEY")
            api_version = os.getenv("AZURE_API_VERSION", "2024-02-01")
            deployment_name = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME", "gpt-4o")
            
            if not azure_endpoint:
                raise ValueError("AZURE_OPENAI_ENDPOINT environment variable is required")
            if not api_key:
                raise ValueError("AZURE_OPENAI_KEY environment variable is required")
            
            if azure_endpoint == "https://your-resource.openai.azure.com/" or api_key == "your-azure-openai-api-key-here":
                raise ValueError("Please update your .env file with actual Azure OpenAI credentials")
            
            self.client = AzureOpenAI(
                azure_endpoint=azure_endpoint,
                api_key=api_key,
                api_version=api_version
            )
            self.deployment_name = deployment_name
            
            self.logger.info(f"Azure OpenAI client initialized with endpoint: {azure_endpoint}")
            self.logger.info(f"Using deployment: {deployment_name}")
            
            # Test connection
            self.test_connection()
            
        except Exception as e:
            self.logger.error(f"Failed to initialize Azure OpenAI client: {str(e)}")
            raise
    
    def test_connection(self):
        """Test Azure OpenAI connection"""
        try:
            response = self.client.chat.completions.create(
                model=self.deployment_name,
                messages=[{"role": "user", "content": "Say 'Connection test successful'"}],
                max_tokens=10
            )
            self.logger.info("✅ Azure OpenAI connection test successful")
            return True
        except Exception as e:
            self.logger.error(f"❌ Azure OpenAI connection test failed: {str(e)}")
            raise
    
    def generate_response(self, prompt: str, system_message: str = None, max_tokens: int = 500):
        """Generate response using Azure OpenAI GPT-4o with retry logic"""
        for attempt in range(self.max_retries):
            try:
                self.logger.info(f"Generating response for prompt: {prompt[:100]}...")
                
                messages = []
                if system_message:
                    messages.append({"role": "system", "content": system_message})
                
                messages.append({"role": "user", "content": prompt})
                
                response = self.client.chat.completions.create(
                    model=self.deployment_name,
                    messages=messages,
                    max_tokens=max_tokens,
                    temperature=0.7
                )
                
                result = response.choices[0].message.content
                self.logger.info("Successfully generated response from Azure OpenAI")
                return result
                
            except Exception as e:
                self.logger.error(f"Attempt {attempt + 1} failed: {str(e)}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay * (attempt + 1))
                    continue
                else:
                    self.logger.error(f"All {self.max_retries} attempts failed")
                    return f"Error: {str(e)}"
###############################################################################################
from fastmcp import FastMCP
from db import get_database
from models import FlightData, ReturnEvent
from azure_client import AzureOpenAIClient
from config import setup_logger
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
from bson import ObjectId
import json
import os
from dotenv import load_dotenv

# Load environment variables at startup
load_dotenv()

# Initialize components
mcp = FastMCP("Flight Data AI Server")
logger = setup_logger("FlightMCPServer")

# Azure client will be initialized on first use
_azure_client = None

def get_azure_client():
    """Lazy initialization of Azure OpenAI client"""
    global _azure_client
    if _azure_client is None:
        try:
            _azure_client = AzureOpenAIClient()
            logger.info("Azure OpenAI client initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize Azure OpenAI client: {str(e)}")
            return None
    return _azure_client

# ============ TOOLS ============

@mcp.tool
def check_environment() -> Dict[str, Any]:
    """Check if all required environment variables are set"""
    logger.info("Checking environment configuration")
    
    required_vars = {
        'MONGODB_URI': 'MongoDB connection string',
        'DB_NAME': 'MongoDB database name', 
        'AZURE_OPENAI_ENDPOINT': 'Azure OpenAI endpoint',
        'AZURE_OPENAI_KEY': 'Azure OpenAI API key',
        'AZURE_OPENAI_DEPLOYMENT_NAME': 'Azure OpenAI deployment name'
    }
    
    results = {}
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value and value not in ["https://your-resource.openai.azure.com/", "your-azure-openai-api-key-here"]:
            # Mask sensitive values
            if 'KEY' in var:
                masked_value = f"{value[:10]}...{value[-4:]}" if len(value) > 14 else "***"
            else:
                masked_value = value
            results[var] = {
                "status": "✅ Set",
                "value": masked_value,
                "description": description
            }
        else:
            results[var] = {
                "status": "❌ Missing", 
                "value": None,
                "description": description
            }
    
    # Test MongoDB connection
    try:
        db = get_database()
        collections = db.list_collection_names()
        results['MONGODB_CONNECTION'] = {
            "status": "✅ Connected",
            "value": f"Found {len(collections)} collections: {collections}",
            "description": "MongoDB database connection"
        }
    except Exception as e:
        results['MONGODB_CONNECTION'] = {
            "status": "❌ Failed",
            "value": str(e),
            "description": "MongoDB database connection"
        }
    
    # Test Azure OpenAI connection
    azure_client = get_azure_client()
    if azure_client:
        results['AZURE_OPENAI_CONNECTION'] = {
            "status": "✅ Connected",
            "value": f"Deployment: {azure_client.deployment_name}",
            "description": "Azure OpenAI API connection"
        }
    else:
        results['AZURE_OPENAI_CONNECTION'] = {
            "status": "❌ Not initialized",
            "value": "Check environment variables",
            "description": "Azure OpenAI API connection"
        }
    
    return results

@mcp.tool
def test_azure_connection() -> Dict[str, Any]:
    """Test Azure OpenAI connection"""
    logger.info("Testing Azure OpenAI connection")
    
    azure_client = get_azure_client()
    if azure_client is None:
        return {"status": "error", "message": "Azure OpenAI client not available"}
    
    try:
        response = azure_client.generate_response(
            prompt="Please respond with 'Connection successful' to confirm Azure OpenAI is working.",
            system_message="You are a test assistant.",
            max_tokens=50
        )
        
        return {
            "status": "success", 
            "message": "Azure OpenAI connection working",
            "response": response
        }
    except Exception as e:
        logger.error(f"Azure OpenAI test failed: {str(e)}")
        return {"status": "error", "message": str(e)}

@mcp.tool
def get_flights_by_carrier(carrier: str) -> List[dict]:
    """Get all flights for a specific carrier"""
    logger.info(f"Fetching flights for carrier: {carrier}")
    try:
        db = get_database()
        flights = list(db.flights.find({"carrier": carrier}))
        logger.info(f"Found {len(flights)} flights for carrier {carrier}")
        return flights
    except Exception as e:
        logger.error(f"Error fetching flights for carrier {carrier}: {str(e)}")
        return []

@mcp.tool
def get_flights_by_route(start_station: str, end_station: str) -> List[dict]:
    """Get flights between two stations"""
    logger.info(f"Fetching flights from {start_station} to {end_station}")
    try:
        db = get_database()
        flights = list(db.flights.find({
            "startstation": start_station,
            "endstation": end_station
        }))
        logger.info(f"Found {len(flights)} flights from {start_station} to {end_station}")
        return flights
    except Exception as e:
        logger.error(f"Error fetching flights from {start_station} to {end_station}: {str(e)}")
        return []

@mcp.tool
def get_flights_by_date_range(start_date: str, end_date: str) -> List[dict]:
    """Get flights within a date range"""
    logger.info(f"Fetching flights from {start_date} to {end_date}")
    try:
        db = get_database()
        flights = list(db.flights.find({
            "dateoforigin": {
                "$gte": start_date,
                "$lte": end_date
            }
        }))
        logger.info(f"Found {len(flights)} flights in date range")
        return flights
    except Exception as e:
        logger.error(f"Error fetching flights by date range: {str(e)}")
        return []

@mcp.tool
def analyze_flight_delays(carrier: str, days: int = 7) -> Dict[str, Any]:
    """Analyze flight delays for a carrier using AI"""
    logger.info(f"Analyzing flight delays for {carrier} over {days} days")
    
    # Get Azure client
    azure_client = get_azure_client()
    if azure_client is None:
        return {"error": "Azure OpenAI client not available. Check configuration."}
    
    try:
        db = get_database()
        
        # Get recent flights data
        start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
        flights = list(db.flights.find({
            "carrier": carrier,
            "dateoforigin": {"$gte": start_date}
        }))
        
        if not flights:
            logger.warning(f"No flights found for carrier {carrier} in the last {days} days")
            return {"analysis": "No data available"}
        
        # Prepare data for AI analysis
        flight_data_summary = {
            "total_flights": len(flights),
            "carrier": carrier,
            "analysis_period": f"Last {days} days",
            "sample_flights": flights[:3]  # Send sample for analysis
        }
        
        # Use Azure OpenAI to analyze delays
        prompt = f"""
        Analyze the following flight data for {carrier} and provide insights about:
        1. Potential delay patterns
        2. Route efficiency
        3. Any concerning trends
        
        Flight Data Summary:
        {json.dumps(flight_data_summary, indent=2, default=str)}
        
        Please provide a concise analysis focusing on operational insights.
        """
        
        system_message = "You are an airline operations analyst. Provide clear, actionable insights about flight data patterns."
        
        analysis = azure_client.generate_response(
            prompt=prompt,
            system_message=system_message,
            max_tokens=800
        )
        
        logger.info(f"Completed AI analysis for {carrier}")
        return {
            "carrier": carrier,
            "analysis_period": f"Last {days} days",
            "total_flights_analyzed": len(flights),
            "ai_analysis": analysis
        }
        
    except Exception as e:
        logger.error(f"Error analyzing flight delays for {carrier}: {str(e)}")
        return {"error": str(e)}

@mcp.tool
def generate_flight_recommendations(origin: str, destination: str, date: str) -> Dict[str, Any]:
    """Generate AI-powered flight recommendations"""
    logger.info(f"Generating recommendations from {origin} to {destination} on {date}")
    
    azure_client = get_azure_client()
    if azure_client is None:
        return {"error": "Azure OpenAI client not available"}
    
    try:
        db = get_database()
        
        # Find available flights
        flights = list(db.flights.find({
            "startstation": origin,
            "endstation": destination,
            "dateoforigin": date
        }))
        
        if not flights:
            logger.warning(f"No flights found from {origin} to {destination} on {date}")
            return {"recommendations": "No flights available"}
        
        # Use AI to generate recommendations
        prompt = f"""
        Analyze these flight options from {origin} to {destination} on {date}:
        {json.dumps(flights, indent=2, default=str)}
        
        Provide recommendations considering:
        1. Optimal timing
        2. Carrier reliability
        3. Any patterns in the data
        
        Format the response with clear recommendations and reasoning.
        """
        
        system_message = "You are a travel advisor. Provide helpful flight recommendations based on the available options."
        
        recommendations = azure_client.generate_response(
            prompt=prompt,
            system_message=system_message,
            max_tokens=600
        )
        
        logger.info(f"Generated AI recommendations for {origin} to {destination}")
        return {
            "route": f"{origin} to {destination}",
            "date": date,
            "available_flights": len(flights),
            "ai_recommendations": recommendations
        }
        
    except Exception as e:
        logger.error(f"Error generating recommendations: {str(e)}")
        return {"error": str(e)}

@mcp.tool
def add_sample_flight() -> Dict[str, Any]:
    """Add sample flight data for testing"""
    logger.info("Adding sample flight data")
    try:
        from db import insert_sample_data
        flight_id = insert_sample_data()
        
        if flight_id:
            return {
                "status": "success",
                "message": "Sample flight data added",
                "flight_id": str(flight_id)
            }
        else:
            return {
                "status": "error", 
                "message": "Failed to add sample flight data"
            }
    except Exception as e:
        logger.error(f"Error adding sample flight: {str(e)}")
        return {"status": "error", "message": str(e)}

# ============ RESOURCES ============

@mcp.resource("flights://{flight_id}")
def get_flight_resource(flight_id: str) -> dict:
    """Get flight data as a resource"""
    logger.info(f"Fetching flight resource for ID: {flight_id}")
    try:
        db = get_database()
        flight = db.flights.find_one({"_id": ObjectId(flight_id)})
        if flight:
            logger.info(f"Successfully retrieved flight {flight_id}")
            return flight
        else:
            logger.warning(f"Flight not found: {flight_id}")
            return {"error": "Flight not found"}
    except Exception as e:
        logger.error(f"Error fetching flight resource {flight_id}: {str(e)}")
        return {"error": str(e)}

@mcp.resource("carriers://{carrier}/flights")
def get_carrier_flights_resource(carrier: str) -> List[dict]:
    """Get all flights for a carrier as a resource"""
    logger.info(f"Fetching flights resource for carrier: {carrier}")
    try:
        db = get_database()
        flights = list(db.flights.find({"carrier": carrier}))
        logger.info(f"Found {len(flights)} flights for carrier {carrier}")
        return flights
    except Exception as e:
        logger.error(f"Error fetching carrier flights resource: {str(e)}")
        return []

# ============ PROMPTS ============

@mcp.prompt
def analyze_route_efficiency(origin: str, destination: str) -> str:
    """Prompt template for route efficiency analysis"""
    logger.info(f"Analyzing route efficiency from {origin} to {destination}")
    
    azure_client = get_azure_client()
    if azure_client is None:
        return "Azure OpenAI client not available for analysis."
    
    flights = get_flights_by_route(origin, destination)
    
    if not flights:
        return f"No flight data available for route {origin} to {destination}"
    
    prompt = f"""
    Analyze the efficiency of the flight route from {origin} to {destination}:
    
    Available Flights Data:
    {json.dumps(flights, indent=2, default=str)}
    
    Please analyze:
    1. Schedule consistency
    2. Carrier distribution
    3. Operational patterns
    4. Potential improvements
    
    Provide actionable insights for this route.
    """
    
    return azure_client.generate_response(
        prompt=prompt,
        system_message="You are an airline route optimization expert.",
        max_tokens=600
    )

if __name__ == "__main__":
    logger.info("Starting Flight Data AI MCP Server")
    print("🚀 Flight Data MCP Server Starting...")
    print("=" * 50)
    
    try:
        # Test database connection
        db = get_database()
        collections = db.list_collection_names()
        print(f"📁 Connected to MongoDB")
        print(f"📊 Collections: {collections}")
        
        # Check Azure connection
        azure_client = get_azure_client()
        if azure_client:
            print("🤖 Azure OpenAI: Connected")
        else:
            print("⚠️  Azure OpenAI: Not available (AI features disabled)")
        
        print("=" * 50)
        print("🛠️  Available Tools:")
        print("   - check_environment()")
        print("   - test_azure_connection()")
        print("   - get_flights_by_carrier(carrier)")
        print("   - get_flights_by_route(start, end)")
        print("   - analyze_flight_delays(carrier, days)")
        print("   - generate_flight_recommendations(origin, destination, date)")
        print("   - add_sample_flight()")
        print("=" * 50)
        
        # Start the server
        mcp.run(host="0.0.0.0", port=8000)
        
    except Exception as e:
        logger.error(f"Failed to start server: {str(e)}")
        print(f"❌ Error starting server: {e}")
        print("💡 Check your .env file and ensure MongoDB is running")
############################################################################################
#!/usr/bin/env python3
"""
Test script to verify all connections before running the MCP server
"""

import os
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_environment():
    """Test if environment variables are set"""
    print("🔍 Testing Environment Variables...")
    
    required_vars = [
        'MONGODB_URI',
        'DB_NAME', 
        'AZURE_OPENAI_ENDPOINT',
        'AZURE_OPENAI_KEY',
        'AZURE_OPENAI_DEPLOYMENT_NAME'
    ]
    
    all_set = True
    for var in required_vars:
        value = os.getenv(var)
        if value and value not in ["https://your-resource.openai.azure.com/", "your-azure-openai-api-key-here"]:
            print(f"  ✅ {var}: Set")
        else:
            print(f"  ❌ {var}: Missing or using default")
            all_set = False
    
    return all_set

def test_mongodb():
    """Test MongoDB connection"""
    print("\n🔍 Testing MongoDB Connection...")
    try:
        from db import get_database
        db = get_database()
        collections = db.list_collection_names()
        print(f"  ✅ MongoDB: Connected successfully")
        print(f"  📁 Collections: {collections}")
        return True
    except Exception as e:
        print(f"  ❌ MongoDB: Connection failed - {e}")
        return False

def test_azure_openai():
    """Test Azure OpenAI connection"""
    print("\n🔍 Testing Azure OpenAI Connection...")
    try:
        from azure_client import AzureOpenAIClient
        client = AzureOpenAIClient()
        print(f"  ✅ Azure OpenAI: Connected successfully")
        print(f"  🤖 Deployment: {client.deployment_name}")
        return True
    except Exception as e:
        print(f"  ❌ Azure OpenAI: Connection failed - {e}")
        return False

def main():
    print("🧪 Flight MCP Server - Connection Tests")
    print("=" * 50)
    
    env_ok = test_environment()
    mongo_ok = test_mongodb()
    azure_ok = test_azure_openai()
    
    print("\n" + "=" * 50)
    print("📊 Test Results:")
    print(f"  Environment: {'✅ OK' if env_ok else '❌ Issues'}")
    print(f"  MongoDB: {'✅ OK' if mongo_ok else '❌ Failed'}")
    print(f"  Azure OpenAI: {'✅ OK' if azure_ok else '❌ Failed'}")
    
    if all([env_ok, mongo_ok]):
        print("\n🎉 Basic server functionality should work!")
        if azure_ok:
            print("🤖 AI features are available!")
        else:
            print("⚠️  AI features will be disabled")
    else:
        print("\n❌ Please fix the issues above before running the server")
        sys.exit(1)

if __name__ == "__main__":
    main()#!/usr/bin/env python3
"""
Test script to verify all connections before running the MCP server
"""

import os
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_environment():
    """Test if environment variables are set"""
    print("🔍 Testing Environment Variables...")
    
    required_vars = [
        'MONGODB_URI',
        'DB_NAME', 
        'AZURE_OPENAI_ENDPOINT',
        'AZURE_OPENAI_KEY',
        'AZURE_OPENAI_DEPLOYMENT_NAME'
    ]
    
    all_set = True
    for var in required_vars:
        value = os.getenv(var)
        if value and value not in ["https://your-resource.openai.azure.com/", "your-azure-openai-api-key-here"]:
            print(f"  ✅ {var}: Set")
        else:
            print(f"  ❌ {var}: Missing or using default")
            all_set = False
    
    return all_set

def test_mongodb():
    """Test MongoDB connection"""
    print("\n🔍 Testing MongoDB Connection...")
    try:
        from db import get_database
        db = get_database()
        collections = db.list_collection_names()
        print(f"  ✅ MongoDB: Connected successfully")
        print(f"  📁 Collections: {collections}")
        return True
    except Exception as e:
        print(f"  ❌ MongoDB: Connection failed - {e}")
        return False

def test_azure_openai():
    """Test Azure OpenAI connection"""
    print("\n🔍 Testing Azure OpenAI Connection...")
    try:
        from azure_client import AzureOpenAIClient
        client = AzureOpenAIClient()
        print(f"  ✅ Azure OpenAI: Connected successfully")
        print(f"  🤖 Deployment: {client.deployment_name}")
        return True
    except Exception as e:
        print(f"  ❌ Azure OpenAI: Connection failed - {e}")
        return False

def main():
    print("🧪 Flight MCP Server - Connection Tests")
    print("=" * 50)
    
    env_ok = test_environment()
    mongo_ok = test_mongodb()
    azure_ok = test_azure_openai()
    
    print("\n" + "=" * 50)
    print("📊 Test Results:")
    print(f"  Environment: {'✅ OK' if env_ok else '❌ Issues'}")
    print(f"  MongoDB: {'✅ OK' if mongo_ok else '❌ Failed'}")
    print(f"  Azure OpenAI: {'✅ OK' if azure_ok else '❌ Failed'}")
    
    if all([env_ok, mongo_ok]):
        print("\n🎉 Basic server functionality should work!")
        if azure_ok:
            print("🤖 AI features are available!")
        else:
            print("⚠️  AI features will be disabled")
    else:
        print("\n❌ Please fix the issues above before running the server")
        sys.exit(1)

if __name__ == "__main__":
    main()#!/usr/bin/env python3
"""
Test script to verify all connections before running the MCP server
"""

import os
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_environment():
    """Test if environment variables are set"""
    print("🔍 Testing Environment Variables...")
    
    required_vars = [
        'MONGODB_URI',
        'DB_NAME', 
        'AZURE_OPENAI_ENDPOINT',
        'AZURE_OPENAI_KEY',
        'AZURE_OPENAI_DEPLOYMENT_NAME'
    ]
    
    all_set = True
    for var in required_vars:
        value = os.getenv(var)
        if value and value not in ["https://your-resource.openai.azure.com/", "your-azure-openai-api-key-here"]:
            print(f"  ✅ {var}: Set")
        else:
            print(f"  ❌ {var}: Missing or using default")
            all_set = False
    
    return all_set

def test_mongodb():
    """Test MongoDB connection"""
    print("\n🔍 Testing MongoDB Connection...")
    try:
        from db import get_database
        db = get_database()
        collections = db.list_collection_names()
        print(f"  ✅ MongoDB: Connected successfully")
        print(f"  📁 Collections: {collections}")
        return True
    except Exception as e:
        print(f"  ❌ MongoDB: Connection failed - {e}")
        return False

def test_azure_openai():
    """Test Azure OpenAI connection"""
    print("\n🔍 Testing Azure OpenAI Connection...")
    try:
        from azure_client import AzureOpenAIClient
        client = AzureOpenAIClient()
        print(f"  ✅ Azure OpenAI: Connected successfully")
        print(f"  🤖 Deployment: {client.deployment_name}")
        return True
    except Exception as e:
        print(f"  ❌ Azure OpenAI: Connection failed - {e}")
        return False

def main():
    print("🧪 Flight MCP Server - Connection Tests")
    print("=" * 50)
    
    env_ok = test_environment()
    mongo_ok = test_mongodb()
    azure_ok = test_azure_openai()
    
    print("\n" + "=" * 50)
    print("📊 Test Results:")
    print(f"  Environment: {'✅ OK' if env_ok else '❌ Issues'}")
    print(f"  MongoDB: {'✅ OK' if mongo_ok else '❌ Failed'}")
    print(f"  Azure OpenAI: {'✅ OK' if azure_ok else '❌ Failed'}")
    
    if all([env_ok, mongo_ok]):
        print("\n🎉 Basic server functionality should work!")
        if azure_ok:
            print("🤖 AI features are available!")
        else:
            print("⚠️  AI features will be disabled")
    else:
        print("\n❌ Please fix the issues above before running the server")
        sys.exit(1)

if __name__ == "__main__":
    main()#!/usr/bin/env python3
"""
Test script to verify all connections before running the MCP server
"""

import os
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_environment():
    """Test if environment variables are set"""
    print("🔍 Testing Environment Variables...")
    
    required_vars = [
        'MONGODB_URI',
        'DB_NAME', 
        'AZURE_OPENAI_ENDPOINT',
        'AZURE_OPENAI_KEY',
        'AZURE_OPENAI_DEPLOYMENT_NAME'
    ]
    
    all_set = True
    for var in required_vars:
        value = os.getenv(var)
        if value and value not in ["https://your-resource.openai.azure.com/", "your-azure-openai-api-key-here"]:
            print(f"  ✅ {var}: Set")
        else:
            print(f"  ❌ {var}: Missing or using default")
            all_set = False
    
    return all_set

def test_mongodb():
    """Test MongoDB connection"""
    print("\n🔍 Testing MongoDB Connection...")
    try:
        from db import get_database
        db = get_database()
        collections = db.list_collection_names()
        print(f"  ✅ MongoDB: Connected successfully")
        print(f"  📁 Collections: {collections}")
        return True
    except Exception as e:
        print(f"  ❌ MongoDB: Connection failed - {e}")
        return False

def test_azure_openai():
    """Test Azure OpenAI connection"""
    print("\n🔍 Testing Azure OpenAI Connection...")
    try:
        from azure_client import AzureOpenAIClient
        client = AzureOpenAIClient()
        print(f"  ✅ Azure OpenAI: Connected successfully")
        print(f"  🤖 Deployment: {client.deployment_name}")
        return True
    except Exception as e:
        print(f"  ❌ Azure OpenAI: Connection failed - {e}")
        return False

def main():
    print("🧪 Flight MCP Server - Connection Tests")
    print("=" * 50)
    
    env_ok = test_environment()
    mongo_ok = test_mongodb()
    azure_ok = test_azure_openai()
    
    print("\n" + "=" * 50)
    print("📊 Test Results:")
    print(f"  Environment: {'✅ OK' if env_ok else '❌ Issues'}")
    print(f"  MongoDB: {'✅ OK' if mongo_ok else '❌ Failed'}")
    print(f"  Azure OpenAI: {'✅ OK' if azure_ok else '❌ Failed'}")
    
    if all([env_ok, mongo_ok]):
        print("\n🎉 Basic server functionality should work!")
        if azure_ok:
            print("🤖 AI features are available!")
        else:
            print("⚠️  AI features will be disabled")
    else:
        print("\n❌ Please fix the issues above before running the server")
        sys.exit(1)

if __name__ == "__main__":
    main()#!/usr/bin/env python3
"""
Test script to verify all connections before running the MCP server
"""

import os
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_environment():
    """Test if environment variables are set"""
    print("🔍 Testing Environment Variables...")
    
    required_vars = [
        'MONGODB_URI',
        'DB_NAME', 
        'AZURE_OPENAI_ENDPOINT',
        'AZURE_OPENAI_KEY',
        'AZURE_OPENAI_DEPLOYMENT_NAME'
    ]
    
    all_set = True
    for var in required_vars:
        value = os.getenv(var)
        if value and value not in ["https://your-resource.openai.azure.com/", "your-azure-openai-api-key-here"]:
            print(f"  ✅ {var}: Set")
        else:
            print(f"  ❌ {var}: Missing or using default")
            all_set = False
    
    return all_set

def test_mongodb():
    """Test MongoDB connection"""
    print("\n🔍 Testing MongoDB Connection...")
    try:
        from db import get_database
        db = get_database()
        collections = db.list_collection_names()
        print(f"  ✅ MongoDB: Connected successfully")
        print(f"  📁 Collections: {collections}")
        return True
    except Exception as e:
        print(f"  ❌ MongoDB: Connection failed - {e}")
        return False

def test_azure_openai():
    """Test Azure OpenAI connection"""
    print("\n🔍 Testing Azure OpenAI Connection...")
    try:
        from azure_client import AzureOpenAIClient
        client = AzureOpenAIClient()
        print(f"  ✅ Azure OpenAI: Connected successfully")
        print(f"  🤖 Deployment: {client.deployment_name}")
        return True
    except Exception as e:
        print(f"  ❌ Azure OpenAI: Connection failed - {e}")
        return False

def main():
    print("🧪 Flight MCP Server - Connection Tests")
    print("=" * 50)
    
    env_ok = test_environment()
    mongo_ok = test_mongodb()
    azure_ok = test_azure_openai()
    
    print("\n" + "=" * 50)
    print("📊 Test Results:")
    print(f"  Environment: {'✅ OK' if env_ok else '❌ Issues'}")
    print(f"  MongoDB: {'✅ OK' if mongo_ok else '❌ Failed'}")
    print(f"  Azure OpenAI: {'✅ OK' if azure_ok else '❌ Failed'}")
    
    if all([env_ok, mongo_ok]):
        print("\n🎉 Basic server functionality should work!")
        if azure_ok:
            print("🤖 AI features are available!")
        else:
            print("⚠️  AI features will be disabled")
    else:
        print("\n❌ Please fix the issues above before running the server")
        sys.exit(1)

if __name__ == "__main__":
    main()#!/usr/bin/env python3
"""
Test script to verify all connections before running the MCP server
"""

import os
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def test_environment():
    """Test if environment variables are set"""
    print("🔍 Testing Environment Variables...")
    
    required_vars = [
        'MONGODB_URI',
        'DB_NAME', 
        'AZURE_OPENAI_ENDPOINT',
        'AZURE_OPENAI_KEY',
        'AZURE_OPENAI_DEPLOYMENT_NAME'
    ]
    
    all_set = True
    for var in required_vars:
        value = os.getenv(var)
        if value and value not in ["https://your-resource.openai.azure.com/", "your-azure-openai-api-key-here"]:
            print(f"  ✅ {var}: Set")
        else:
            print(f"  ❌ {var}: Missing or using default")
            all_set = False
    
    return all_set

def test_mongodb():
    """Test MongoDB connection"""
    print("\n🔍 Testing MongoDB Connection...")
    try:
        from db import get_database
        db = get_database()
        collections = db.list_collection_names()
        print(f"  ✅ MongoDB: Connected successfully")
        print(f"  📁 Collections: {collections}")
        return True
    except Exception as e:
        print(f"  ❌ MongoDB: Connection failed - {e}")
        return False

def test_azure_openai():
    """Test Azure OpenAI connection"""
    print("\n🔍 Testing Azure OpenAI Connection...")
    try:
        from azure_client import AzureOpenAIClient
        client = AzureOpenAIClient()
        print(f"  ✅ Azure OpenAI: Connected successfully")
        print(f"  🤖 Deployment: {client.deployment_name}")
        return True
    except Exception as e:
        print(f"  ❌ Azure OpenAI: Connection failed - {e}")
        return False

def main():
    print("🧪 Flight MCP Server - Connection Tests")
    print("=" * 50)
    
    env_ok = test_environment()
    mongo_ok = test_mongodb()
    azure_ok = test_azure_openai()
    
    print("\n" + "=" * 50)
    print("📊 Test Results:")
    print(f"  Environment: {'✅ OK' if env_ok else '❌ Issues'}")
    print(f"  MongoDB: {'✅ OK' if mongo_ok else '❌ Failed'}")
    print(f"  Azure OpenAI: {'✅ OK' if azure_ok else '❌ Failed'}")
    
    if all([env_ok, mongo_ok]):
        print("\n🎉 Basic server functionality should work!")
        if azure_ok:
            print("🤖 AI features are available!")
        else:
            print("⚠️  AI features will be disabled")
    else:
        print("\n❌ Please fix the issues above before running the server")
        sys.exit(1)

if __name__ == "__main__":
    main()

    
    return logger
