import React, { useState, useEffect } from 'react';
import { User, Bot, AlertCircle, Plane, Clock, Download } from 'lucide-react';
import { Message } from '../types';
import { FlightDataView } from './FlightDataView';
import ReactMarkdown from 'react-markdown';

interface MessageBubbleProps {
  message: Message;
  className?: string;
  onExportData?: (data: any) => void;
}

export const MessageBubble: React.FC<MessageBubbleProps> = ({ 
  message, 
  className = '',
  onExportData 
}) => {
  const isUser = message.isUser;
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => setIsVisible(true), 50);
    return () => clearTimeout(timer);
  }, []);

  // Handle loading state
  if (message.type === 'loading') {
    return (
      <div className="flex justify-start animate-pulse">
        <div className="flex space-x-3 max-w-3xl">
          <div className="flex-shrink-0 w-8 h-8 rounded-full bg-indigo-600 flex items-center justify-center">
            <Bot className="h-4 w-4 text-white" />
          </div>
          <div className="bg-white border border-indigo-100 rounded-2xl px-4 py-3 rounded-bl-md shadow-sm">
            <div className="flex items-center space-x-2">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-indigo-300 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-indigo-300 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-indigo-300 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
              <span className="text-sm text-gray-500">Searching flight data...</span>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div 
      className={`flex ${isUser ? 'justify-end' : 'justify-start'} ${
        isVisible ? 'animate-landing' : 'opacity-0 translate-y-4'
      } transition-all duration-300 ${className}`}
      role="listitem"
      aria-label={isUser ? 'User message' : 'Assistant message'}
    >
      <div className={`flex space-x-3 max-w-3xl ${isUser ? 'flex-row-reverse space-x-reverse' : 'flex-row'}`}>
        {/* Avatar */}
        <div 
          className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center transition-colors ${
            isUser 
              ? 'bg-aviation-sky hover:bg-blue-500' 
              : message.type === 'error'
                ? 'bg-red-500 hover:bg-red-600'
                : 'bg-indigo-600 hover:bg-indigo-700'
          }`}
          aria-hidden="true"
        >
          {isUser ? (
            <User className="h-4 w-4 text-white" />
          ) : message.type === 'error' ? (
            <AlertCircle className="h-4 w-4 text-white" />
          ) : (
            <Bot className="h-4 w-4 text-white" />
          )}
        </div>

        {/* Message Content */}
        <div 
          className={`rounded-2xl px-4 py-3 transition-all duration-200 ${
            isUser 
              ? 'bg-aviation-sky text-white rounded-br-md shadow-lg hover:shadow-xl transform hover:-translate-y-0.5' 
              : message.type === 'error'
                ? 'bg-red-50 border border-red-200 text-red-800 rounded-bl-md shadow-sm'
                : 'bg-white border border-indigo-100 text-gray-800 rounded-bl-md shadow-sm hover:shadow-md'
          }`}
        >
          {/* Message Header with Timestamp */}
          <div className={`flex items-center justify-between mb-1 ${
            isUser ? 'text-blue-100' : 'text-gray-500'
          }`}>
            <span className="text-xs font-medium">
              {isUser ? 'You' : 'Flight Assistant'}
            </span>
            <span className="text-xs">
              {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </span>
          </div>

          {/* Text Message */}
          {message.type === 'text' && (
            <div className="prose prose-sm max-w-none">
              <ReactMarkdown
                components={{
                  p: ({ children }) => <p className="mb-2 last:mb-0">{children}</p>,
                  ul: ({ children }) => <ul className="list-disc list-inside mb-2 space-y-1">{children}</ul>,
                  ol: ({ children }) => <ol className="list-decimal list-inside mb-2 space-y-1">{children}</ol>,
                  strong: ({ children }) => <strong className="font-semibold">{children}</strong>,
                }}
              >
                {message.text}
              </ReactMarkdown>
            </div>
          )}

          {/* Error Message */}
          {message.type === 'error' && (
            <div className="flex items-center space-x-2">
              <AlertCircle className="h-4 w-4 flex-shrink-0" />
              <span className="text-sm">{message.text}</span>
            </div>
          )}

          {/* Flight Data with Export Option */}
          {message.data && (
            <div className="mt-3 border-t pt-3 border-opacity-20">
              <div className="flex items-center justify-between mb-2">
                <span className={`text-sm font-semibold ${
                  isUser ? 'text-blue-100' : 'text-indigo-700'
                }`}>
                  Flight Information
                </span>
                {onExportData && (
                  <button
                    onClick={() => onExportData(message.data)}
                    className={`flex items-center space-x-1 text-xs px-2 py-1 rounded ${
                      isUser 
                        ? 'bg-blue-400 hover:bg-blue-300 text-white' 
                        : 'bg-indigo-100 hover:bg-indigo-200 text-indigo-700'
                    } transition-colors`}
                  >
                    <Download className="h-3 w-3" />
                    <span>Export</span>
                  </button>
                )}
              </div>
              <FlightDataView data={message.data} />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
